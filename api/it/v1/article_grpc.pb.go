// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: it/v1/article.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Article_GetArticleInfo_FullMethodName      = "/it.v1.Article/GetArticleInfo"
	Article_GetArticleList_FullMethodName      = "/it.v1.Article/GetArticleList"
	Article_GetCoumnArticleList_FullMethodName = "/it.v1.Article/GetCoumnArticleList"
	Article_GetUserTodayPostNum_FullMethodName = "/it.v1.Article/GetUserTodayPostNum"
	Article_CreateArticle_FullMethodName       = "/it.v1.Article/CreateArticle"
	Article_ArticleESAdd_FullMethodName        = "/it.v1.Article/ArticleESAdd"
	Article_ArticleESDelete_FullMethodName     = "/it.v1.Article/ArticleESDelete"
	Article_ArticleESDeleteAll_FullMethodName  = "/it.v1.Article/ArticleESDeleteAll"
)

// ArticleClient is the client API for Article service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArticleClient interface {
	// 获取文章列表
	GetArticleInfo(ctx context.Context, in *GetArticleInfoRequest, opts ...grpc.CallOption) (*GetArticleInfoReply, error)
	// 获取文章列表
	GetArticleList(ctx context.Context, in *GetArticleListRequest, opts ...grpc.CallOption) (*GetArticleListReply, error)
	// 获取首页/大类文章列表
	GetCoumnArticleList(ctx context.Context, in *GetColumnArticleRequest, opts ...grpc.CallOption) (*GetArticleListReply, error)
	// 获取首页/大类文章列表
	GetUserTodayPostNum(ctx context.Context, in *UserTodayPostNumRequest, opts ...grpc.CallOption) (*UserTodayPostNumReply, error)
	// 发布文章
	CreateArticle(ctx context.Context, in *CreateArticleRequest, opts ...grpc.CallOption) (*CreateArticleReply, error)
	// 添加es文章
	ArticleESAdd(ctx context.Context, in *ArticleESAddRequest, opts ...grpc.CallOption) (*ArticleESAddReply, error)
	// 删除es文章
	ArticleESDelete(ctx context.Context, in *ArticleESDeleteRequest, opts ...grpc.CallOption) (*ArticleESDeleteReply, error)
	// 删除es文章
	ArticleESDeleteAll(ctx context.Context, in *ArticleESDeleteAllRequest, opts ...grpc.CallOption) (*ArticleESDeleteAllReply, error)
}

type articleClient struct {
	cc grpc.ClientConnInterface
}

func NewArticleClient(cc grpc.ClientConnInterface) ArticleClient {
	return &articleClient{cc}
}

func (c *articleClient) GetArticleInfo(ctx context.Context, in *GetArticleInfoRequest, opts ...grpc.CallOption) (*GetArticleInfoReply, error) {
	out := new(GetArticleInfoReply)
	err := c.cc.Invoke(ctx, Article_GetArticleInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) GetArticleList(ctx context.Context, in *GetArticleListRequest, opts ...grpc.CallOption) (*GetArticleListReply, error) {
	out := new(GetArticleListReply)
	err := c.cc.Invoke(ctx, Article_GetArticleList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) GetCoumnArticleList(ctx context.Context, in *GetColumnArticleRequest, opts ...grpc.CallOption) (*GetArticleListReply, error) {
	out := new(GetArticleListReply)
	err := c.cc.Invoke(ctx, Article_GetCoumnArticleList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) GetUserTodayPostNum(ctx context.Context, in *UserTodayPostNumRequest, opts ...grpc.CallOption) (*UserTodayPostNumReply, error) {
	out := new(UserTodayPostNumReply)
	err := c.cc.Invoke(ctx, Article_GetUserTodayPostNum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) CreateArticle(ctx context.Context, in *CreateArticleRequest, opts ...grpc.CallOption) (*CreateArticleReply, error) {
	out := new(CreateArticleReply)
	err := c.cc.Invoke(ctx, Article_CreateArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) ArticleESAdd(ctx context.Context, in *ArticleESAddRequest, opts ...grpc.CallOption) (*ArticleESAddReply, error) {
	out := new(ArticleESAddReply)
	err := c.cc.Invoke(ctx, Article_ArticleESAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) ArticleESDelete(ctx context.Context, in *ArticleESDeleteRequest, opts ...grpc.CallOption) (*ArticleESDeleteReply, error) {
	out := new(ArticleESDeleteReply)
	err := c.cc.Invoke(ctx, Article_ArticleESDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) ArticleESDeleteAll(ctx context.Context, in *ArticleESDeleteAllRequest, opts ...grpc.CallOption) (*ArticleESDeleteAllReply, error) {
	out := new(ArticleESDeleteAllReply)
	err := c.cc.Invoke(ctx, Article_ArticleESDeleteAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArticleServer is the server API for Article service.
// All implementations must embed UnimplementedArticleServer
// for forward compatibility
type ArticleServer interface {
	// 获取文章列表
	GetArticleInfo(context.Context, *GetArticleInfoRequest) (*GetArticleInfoReply, error)
	// 获取文章列表
	GetArticleList(context.Context, *GetArticleListRequest) (*GetArticleListReply, error)
	// 获取首页/大类文章列表
	GetCoumnArticleList(context.Context, *GetColumnArticleRequest) (*GetArticleListReply, error)
	// 获取首页/大类文章列表
	GetUserTodayPostNum(context.Context, *UserTodayPostNumRequest) (*UserTodayPostNumReply, error)
	// 发布文章
	CreateArticle(context.Context, *CreateArticleRequest) (*CreateArticleReply, error)
	// 添加es文章
	ArticleESAdd(context.Context, *ArticleESAddRequest) (*ArticleESAddReply, error)
	// 删除es文章
	ArticleESDelete(context.Context, *ArticleESDeleteRequest) (*ArticleESDeleteReply, error)
	// 删除es文章
	ArticleESDeleteAll(context.Context, *ArticleESDeleteAllRequest) (*ArticleESDeleteAllReply, error)
	mustEmbedUnimplementedArticleServer()
}

// UnimplementedArticleServer must be embedded to have forward compatible implementations.
type UnimplementedArticleServer struct {
}

func (UnimplementedArticleServer) GetArticleInfo(context.Context, *GetArticleInfoRequest) (*GetArticleInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticleInfo not implemented")
}
func (UnimplementedArticleServer) GetArticleList(context.Context, *GetArticleListRequest) (*GetArticleListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticleList not implemented")
}
func (UnimplementedArticleServer) GetCoumnArticleList(context.Context, *GetColumnArticleRequest) (*GetArticleListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoumnArticleList not implemented")
}
func (UnimplementedArticleServer) GetUserTodayPostNum(context.Context, *UserTodayPostNumRequest) (*UserTodayPostNumReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserTodayPostNum not implemented")
}
func (UnimplementedArticleServer) CreateArticle(context.Context, *CreateArticleRequest) (*CreateArticleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArticle not implemented")
}
func (UnimplementedArticleServer) ArticleESAdd(context.Context, *ArticleESAddRequest) (*ArticleESAddReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArticleESAdd not implemented")
}
func (UnimplementedArticleServer) ArticleESDelete(context.Context, *ArticleESDeleteRequest) (*ArticleESDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArticleESDelete not implemented")
}
func (UnimplementedArticleServer) ArticleESDeleteAll(context.Context, *ArticleESDeleteAllRequest) (*ArticleESDeleteAllReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArticleESDeleteAll not implemented")
}
func (UnimplementedArticleServer) mustEmbedUnimplementedArticleServer() {}

// UnsafeArticleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArticleServer will
// result in compilation errors.
type UnsafeArticleServer interface {
	mustEmbedUnimplementedArticleServer()
}

func RegisterArticleServer(s grpc.ServiceRegistrar, srv ArticleServer) {
	s.RegisterService(&Article_ServiceDesc, srv)
}

func _Article_GetArticleInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GetArticleInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_GetArticleInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GetArticleInfo(ctx, req.(*GetArticleInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_GetArticleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GetArticleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_GetArticleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GetArticleList(ctx, req.(*GetArticleListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_GetCoumnArticleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetColumnArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GetCoumnArticleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_GetCoumnArticleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GetCoumnArticleList(ctx, req.(*GetColumnArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_GetUserTodayPostNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserTodayPostNumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GetUserTodayPostNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_GetUserTodayPostNum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GetUserTodayPostNum(ctx, req.(*UserTodayPostNumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_CreateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).CreateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_CreateArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).CreateArticle(ctx, req.(*CreateArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_ArticleESAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleESAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).ArticleESAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_ArticleESAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).ArticleESAdd(ctx, req.(*ArticleESAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_ArticleESDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleESDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).ArticleESDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_ArticleESDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).ArticleESDelete(ctx, req.(*ArticleESDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_ArticleESDeleteAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleESDeleteAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).ArticleESDeleteAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_ArticleESDeleteAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).ArticleESDeleteAll(ctx, req.(*ArticleESDeleteAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Article_ServiceDesc is the grpc.ServiceDesc for Article service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Article_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "it.v1.Article",
	HandlerType: (*ArticleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetArticleInfo",
			Handler:    _Article_GetArticleInfo_Handler,
		},
		{
			MethodName: "GetArticleList",
			Handler:    _Article_GetArticleList_Handler,
		},
		{
			MethodName: "GetCoumnArticleList",
			Handler:    _Article_GetCoumnArticleList_Handler,
		},
		{
			MethodName: "GetUserTodayPostNum",
			Handler:    _Article_GetUserTodayPostNum_Handler,
		},
		{
			MethodName: "CreateArticle",
			Handler:    _Article_CreateArticle_Handler,
		},
		{
			MethodName: "ArticleESAdd",
			Handler:    _Article_ArticleESAdd_Handler,
		},
		{
			MethodName: "ArticleESDelete",
			Handler:    _Article_ArticleESDelete_Handler,
		},
		{
			MethodName: "ArticleESDeleteAll",
			Handler:    _Article_ArticleESDeleteAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "it/v1/article.proto",
}
