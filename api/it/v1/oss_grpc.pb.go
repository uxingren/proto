// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: it/v1/oss.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OSS_OssUpload_FullMethodName = "/it.v1.OSS/OssUpload"
)

// OSSClient is the client API for OSS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OSSClient interface {
	OssUpload(ctx context.Context, in *OssUploadRequest, opts ...grpc.CallOption) (*OssUploadReply, error)
}

type oSSClient struct {
	cc grpc.ClientConnInterface
}

func NewOSSClient(cc grpc.ClientConnInterface) OSSClient {
	return &oSSClient{cc}
}

func (c *oSSClient) OssUpload(ctx context.Context, in *OssUploadRequest, opts ...grpc.CallOption) (*OssUploadReply, error) {
	out := new(OssUploadReply)
	err := c.cc.Invoke(ctx, OSS_OssUpload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OSSServer is the server API for OSS service.
// All implementations must embed UnimplementedOSSServer
// for forward compatibility
type OSSServer interface {
	OssUpload(context.Context, *OssUploadRequest) (*OssUploadReply, error)
	mustEmbedUnimplementedOSSServer()
}

// UnimplementedOSSServer must be embedded to have forward compatible implementations.
type UnimplementedOSSServer struct {
}

func (UnimplementedOSSServer) OssUpload(context.Context, *OssUploadRequest) (*OssUploadReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OssUpload not implemented")
}
func (UnimplementedOSSServer) mustEmbedUnimplementedOSSServer() {}

// UnsafeOSSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OSSServer will
// result in compilation errors.
type UnsafeOSSServer interface {
	mustEmbedUnimplementedOSSServer()
}

func RegisterOSSServer(s grpc.ServiceRegistrar, srv OSSServer) {
	s.RegisterService(&OSS_ServiceDesc, srv)
}

func _OSS_OssUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OssUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSSServer).OssUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OSS_OssUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSSServer).OssUpload(ctx, req.(*OssUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OSS_ServiceDesc is the grpc.ServiceDesc for OSS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OSS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "it.v1.OSS",
	HandlerType: (*OSSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OssUpload",
			Handler:    _OSS_OssUpload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "it/v1/oss.proto",
}
