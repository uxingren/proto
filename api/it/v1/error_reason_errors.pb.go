// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsGreeterUnspecified(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	stat := e.Metadata["stat"]
	code := e.Metadata["code"]
	return (e.Reason == ErrorReason_GREETER_UNSPECIFIED.String() || (stat == "0" && code == "0")) && e.Code == 0
}

func ErrorGreeterUnspecified(format string, args ...interface{}) *errors.Error {
	md := map[string]string{
		"stat": "0",
		"code": "0",
	}
	return errors.New(0, ErrorReason_GREETER_UNSPECIFIED.String(), fmt.Sprintf(format, args...)).WithMetadata(md)
}

func ErrorMsgGreeterUnspecified() *errors.Error {
	md := map[string]string{
		"stat": "0",
		"code": "0",
	}

	return errors.New(0, ErrorReason_GREETER_UNSPECIFIED.String(), "").WithMetadata(md)
}

func IsUserNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	stat := e.Metadata["stat"]
	code := e.Metadata["code"]
	return (e.Reason == ErrorReason_UserNotFound.String() || (stat == "0" && code == "0")) && e.Code == 0
}

func ErrorUserNotFound(format string, args ...interface{}) *errors.Error {
	md := map[string]string{
		"stat": "0",
		"code": "0",
	}
	return errors.New(0, ErrorReason_UserNotFound.String(), fmt.Sprintf(format, args...)).WithMetadata(md)
}

func ErrorMsgUserNotFound() *errors.Error {
	md := map[string]string{
		"stat": "0",
		"code": "0",
	}

	return errors.New(0, ErrorReason_UserNotFound.String(), "").WithMetadata(md)
}

func IsArticleNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	stat := e.Metadata["stat"]
	code := e.Metadata["code"]
	return (e.Reason == ErrorReason_ArticleNotFound.String() || (stat == "0" && code == "0")) && e.Code == 0
}

func ErrorArticleNotFound(format string, args ...interface{}) *errors.Error {
	md := map[string]string{
		"stat": "0",
		"code": "0",
	}
	return errors.New(0, ErrorReason_ArticleNotFound.String(), fmt.Sprintf(format, args...)).WithMetadata(md)
}

func ErrorMsgArticleNotFound() *errors.Error {
	md := map[string]string{
		"stat": "0",
		"code": "0",
	}

	return errors.New(0, ErrorReason_ArticleNotFound.String(), "").WithMetadata(md)
}

func IsUserIdIsEmpty(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	stat := e.Metadata["stat"]
	code := e.Metadata["code"]
	return (e.Reason == ErrorReason_UserIdIsEmpty.String() || (stat == "0" && code == "0")) && e.Code == 0
}

func ErrorUserIdIsEmpty(format string, args ...interface{}) *errors.Error {
	md := map[string]string{
		"stat": "0",
		"code": "0",
	}
	return errors.New(0, ErrorReason_UserIdIsEmpty.String(), fmt.Sprintf(format, args...)).WithMetadata(md)
}

func ErrorMsgUserIdIsEmpty() *errors.Error {
	md := map[string]string{
		"stat": "0",
		"code": "0",
	}

	return errors.New(0, ErrorReason_UserIdIsEmpty.String(), "").WithMetadata(md)
}

func IsRegisterError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	stat := e.Metadata["stat"]
	code := e.Metadata["code"]
	return (e.Reason == ErrorReason_RegisterError.String() || (stat == "0" && code == "0")) && e.Code == 0
}

func ErrorRegisterError(format string, args ...interface{}) *errors.Error {
	md := map[string]string{
		"stat": "0",
		"code": "0",
	}
	return errors.New(0, ErrorReason_RegisterError.String(), fmt.Sprintf(format, args...)).WithMetadata(md)
}

func ErrorMsgRegisterError() *errors.Error {
	md := map[string]string{
		"stat": "0",
		"code": "0",
	}

	return errors.New(0, ErrorReason_RegisterError.String(), "").WithMetadata(md)
}

func IsIsBindMobile(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	stat := e.Metadata["stat"]
	code := e.Metadata["code"]
	return (e.Reason == ErrorReason_IsBindMobile.String() || (stat == "0" && code == "0")) && e.Code == 0
}

func ErrorIsBindMobile(format string, args ...interface{}) *errors.Error {
	md := map[string]string{
		"stat": "0",
		"code": "0",
	}
	return errors.New(0, ErrorReason_IsBindMobile.String(), fmt.Sprintf(format, args...)).WithMetadata(md)
}

func ErrorMsgIsBindMobile() *errors.Error {
	md := map[string]string{
		"stat": "0",
		"code": "0",
	}

	return errors.New(0, ErrorReason_IsBindMobile.String(), "").WithMetadata(md)
}
