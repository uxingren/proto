// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.2
// - protoc             v3.21.12
// source: it/v1/sms.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSMSSendSmsCode = "/it.v1.SMS/SendSmsCode"

type SMSHTTPServer interface {
	SendSmsCode(context.Context, *SmsCodeSendRequest) (*SmsCodeSendReply, error)
}

func RegisterSMSHTTPServer(s *http.Server, srv SMSHTTPServer) {
	r := s.Route("/")
	r.POST("/sms/send", _SMS_SendSmsCode0_HTTP_Handler(srv))
}

func _SMS_SendSmsCode0_HTTP_Handler(srv SMSHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SmsCodeSendRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSMSSendSmsCode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendSmsCode(ctx, req.(*SmsCodeSendRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SmsCodeSendReply)
		return ctx.Result(200, reply)
	}
}

type SMSHTTPClient interface {
	SendSmsCode(ctx context.Context, req *SmsCodeSendRequest, opts ...http.CallOption) (rsp *SmsCodeSendReply, err error)
}

type SMSHTTPClientImpl struct {
	cc *http.Client
}

func NewSMSHTTPClient(client *http.Client) SMSHTTPClient {
	return &SMSHTTPClientImpl{client}
}

func (c *SMSHTTPClientImpl) SendSmsCode(ctx context.Context, in *SmsCodeSendRequest, opts ...http.CallOption) (*SmsCodeSendReply, error) {
	var out SmsCodeSendReply
	pattern := "/sms/send"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSMSSendSmsCode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
