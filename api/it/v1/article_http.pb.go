// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.2
// - protoc             v3.21.12
// source: it/v1/article.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationArticleArticleESAdd = "/it.v1.Article/ArticleESAdd"
const OperationArticleArticleESDelete = "/it.v1.Article/ArticleESDelete"
const OperationArticleArticleESDeleteAll = "/it.v1.Article/ArticleESDeleteAll"
const OperationArticleCreateArticle = "/it.v1.Article/CreateArticle"
const OperationArticleGetArticleInfo = "/it.v1.Article/GetArticleInfo"
const OperationArticleGetArticleList = "/it.v1.Article/GetArticleList"
const OperationArticleGetCoumnArticleList = "/it.v1.Article/GetCoumnArticleList"
const OperationArticleGetUserTodayPostNum = "/it.v1.Article/GetUserTodayPostNum"

type ArticleHTTPServer interface {
	// ArticleESAdd 添加es文章
	ArticleESAdd(context.Context, *ArticleESAddRequest) (*ArticleESAddReply, error)
	// ArticleESDelete 删除es文章
	ArticleESDelete(context.Context, *ArticleESDeleteRequest) (*ArticleESDeleteReply, error)
	// ArticleESDeleteAll 删除es文章
	ArticleESDeleteAll(context.Context, *ArticleESDeleteAllRequest) (*ArticleESDeleteAllReply, error)
	// CreateArticle 发布文章
	CreateArticle(context.Context, *CreateArticleRequest) (*CreateArticleReply, error)
	// GetArticleInfo 获取文章列表
	GetArticleInfo(context.Context, *GetArticleInfoRequest) (*GetArticleInfoReply, error)
	// GetArticleList 获取文章列表
	GetArticleList(context.Context, *GetArticleListRequest) (*GetArticleListReply, error)
	// GetCoumnArticleList 获取首页/大类文章列表
	GetCoumnArticleList(context.Context, *GetColumnArticleRequest) (*GetArticleListReply, error)
	// GetUserTodayPostNum 获取首页/大类文章列表
	GetUserTodayPostNum(context.Context, *UserTodayPostNumRequest) (*UserTodayPostNumReply, error)
}

func RegisterArticleHTTPServer(s *http.Server, srv ArticleHTTPServer) {
	r := s.Route("/")
	r.GET("/article/info", _Article_GetArticleInfo0_HTTP_Handler(srv))
	r.GET("/article/list", _Article_GetArticleList0_HTTP_Handler(srv))
	r.GET("/article/column", _Article_GetCoumnArticleList0_HTTP_Handler(srv))
	r.GET("/article/post-num/today", _Article_GetUserTodayPostNum0_HTTP_Handler(srv))
	r.POST("/article/create", _Article_CreateArticle0_HTTP_Handler(srv))
	r.POST("/article/es/add", _Article_ArticleESAdd0_HTTP_Handler(srv))
	r.POST("/article/es/delete", _Article_ArticleESDelete0_HTTP_Handler(srv))
	r.POST("/article/es/del-all", _Article_ArticleESDeleteAll0_HTTP_Handler(srv))
}

func _Article_GetArticleInfo0_HTTP_Handler(srv ArticleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetArticleInfoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationArticleGetArticleInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetArticleInfo(ctx, req.(*GetArticleInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetArticleInfoReply)
		return ctx.Result(200, reply)
	}
}

func _Article_GetArticleList0_HTTP_Handler(srv ArticleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetArticleListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationArticleGetArticleList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetArticleList(ctx, req.(*GetArticleListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetArticleListReply)
		return ctx.Result(200, reply)
	}
}

func _Article_GetCoumnArticleList0_HTTP_Handler(srv ArticleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetColumnArticleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationArticleGetCoumnArticleList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCoumnArticleList(ctx, req.(*GetColumnArticleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetArticleListReply)
		return ctx.Result(200, reply)
	}
}

func _Article_GetUserTodayPostNum0_HTTP_Handler(srv ArticleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserTodayPostNumRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationArticleGetUserTodayPostNum)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserTodayPostNum(ctx, req.(*UserTodayPostNumRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserTodayPostNumReply)
		return ctx.Result(200, reply)
	}
}

func _Article_CreateArticle0_HTTP_Handler(srv ArticleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateArticleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationArticleCreateArticle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateArticle(ctx, req.(*CreateArticleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateArticleReply)
		return ctx.Result(200, reply)
	}
}

func _Article_ArticleESAdd0_HTTP_Handler(srv ArticleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ArticleESAddRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationArticleArticleESAdd)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ArticleESAdd(ctx, req.(*ArticleESAddRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ArticleESAddReply)
		return ctx.Result(200, reply)
	}
}

func _Article_ArticleESDelete0_HTTP_Handler(srv ArticleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ArticleESDeleteRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationArticleArticleESDelete)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ArticleESDelete(ctx, req.(*ArticleESDeleteRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ArticleESDeleteReply)
		return ctx.Result(200, reply)
	}
}

func _Article_ArticleESDeleteAll0_HTTP_Handler(srv ArticleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ArticleESDeleteAllRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationArticleArticleESDeleteAll)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ArticleESDeleteAll(ctx, req.(*ArticleESDeleteAllRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ArticleESDeleteAllReply)
		return ctx.Result(200, reply)
	}
}

type ArticleHTTPClient interface {
	ArticleESAdd(ctx context.Context, req *ArticleESAddRequest, opts ...http.CallOption) (rsp *ArticleESAddReply, err error)
	ArticleESDelete(ctx context.Context, req *ArticleESDeleteRequest, opts ...http.CallOption) (rsp *ArticleESDeleteReply, err error)
	ArticleESDeleteAll(ctx context.Context, req *ArticleESDeleteAllRequest, opts ...http.CallOption) (rsp *ArticleESDeleteAllReply, err error)
	CreateArticle(ctx context.Context, req *CreateArticleRequest, opts ...http.CallOption) (rsp *CreateArticleReply, err error)
	GetArticleInfo(ctx context.Context, req *GetArticleInfoRequest, opts ...http.CallOption) (rsp *GetArticleInfoReply, err error)
	GetArticleList(ctx context.Context, req *GetArticleListRequest, opts ...http.CallOption) (rsp *GetArticleListReply, err error)
	GetCoumnArticleList(ctx context.Context, req *GetColumnArticleRequest, opts ...http.CallOption) (rsp *GetArticleListReply, err error)
	GetUserTodayPostNum(ctx context.Context, req *UserTodayPostNumRequest, opts ...http.CallOption) (rsp *UserTodayPostNumReply, err error)
}

type ArticleHTTPClientImpl struct {
	cc *http.Client
}

func NewArticleHTTPClient(client *http.Client) ArticleHTTPClient {
	return &ArticleHTTPClientImpl{client}
}

func (c *ArticleHTTPClientImpl) ArticleESAdd(ctx context.Context, in *ArticleESAddRequest, opts ...http.CallOption) (*ArticleESAddReply, error) {
	var out ArticleESAddReply
	pattern := "/article/es/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationArticleArticleESAdd))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ArticleHTTPClientImpl) ArticleESDelete(ctx context.Context, in *ArticleESDeleteRequest, opts ...http.CallOption) (*ArticleESDeleteReply, error) {
	var out ArticleESDeleteReply
	pattern := "/article/es/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationArticleArticleESDelete))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ArticleHTTPClientImpl) ArticleESDeleteAll(ctx context.Context, in *ArticleESDeleteAllRequest, opts ...http.CallOption) (*ArticleESDeleteAllReply, error) {
	var out ArticleESDeleteAllReply
	pattern := "/article/es/del-all"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationArticleArticleESDeleteAll))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ArticleHTTPClientImpl) CreateArticle(ctx context.Context, in *CreateArticleRequest, opts ...http.CallOption) (*CreateArticleReply, error) {
	var out CreateArticleReply
	pattern := "/article/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationArticleCreateArticle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ArticleHTTPClientImpl) GetArticleInfo(ctx context.Context, in *GetArticleInfoRequest, opts ...http.CallOption) (*GetArticleInfoReply, error) {
	var out GetArticleInfoReply
	pattern := "/article/info"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationArticleGetArticleInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ArticleHTTPClientImpl) GetArticleList(ctx context.Context, in *GetArticleListRequest, opts ...http.CallOption) (*GetArticleListReply, error) {
	var out GetArticleListReply
	pattern := "/article/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationArticleGetArticleList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ArticleHTTPClientImpl) GetCoumnArticleList(ctx context.Context, in *GetColumnArticleRequest, opts ...http.CallOption) (*GetArticleListReply, error) {
	var out GetArticleListReply
	pattern := "/article/column"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationArticleGetCoumnArticleList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ArticleHTTPClientImpl) GetUserTodayPostNum(ctx context.Context, in *UserTodayPostNumRequest, opts ...http.CallOption) (*UserTodayPostNumReply, error) {
	var out UserTodayPostNumReply
	pattern := "/article/post-num/today"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationArticleGetUserTodayPostNum))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
